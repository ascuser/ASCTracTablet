//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ascTracWCFService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/asctracWCFLibrary")]
    public partial class CompositeType : object
    {
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue
        {
            get
            {
                return this.BoolValueField;
            }
            set
            {
                this.BoolValueField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue
        {
            get
            {
                return this.StringValueField;
            }
            set
            {
                this.StringValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ascBasicInboundMessageType", Namespace="http://schemas.datacontract.org/2004/07/asctracWCFLibrary")]
    public partial class ascBasicInboundMessageType : object
    {
        
        private string ConnectionIDField;
        
        private string DataMessageField;
        
        private string HHIDField;
        
        private string SiteIDField;
        
        private string UnitIDField;
        
        private string UserIDField;
        
        private string hdrDataMessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionID
        {
            get
            {
                return this.ConnectionIDField;
            }
            set
            {
                this.ConnectionIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataMessage
        {
            get
            {
                return this.DataMessageField;
            }
            set
            {
                this.DataMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HHID
        {
            get
            {
                return this.HHIDField;
            }
            set
            {
                this.HHIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteID
        {
            get
            {
                return this.SiteIDField;
            }
            set
            {
                this.SiteIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitID
        {
            get
            {
                return this.UnitIDField;
            }
            set
            {
                this.UnitIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID
        {
            get
            {
                return this.UserIDField;
            }
            set
            {
                this.UserIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hdrDataMessage
        {
            get
            {
                return this.hdrDataMessageField;
            }
            set
            {
                this.hdrDataMessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ascBasicReturnMessageType", Namespace="http://schemas.datacontract.org/2004/07/asctracWCFLibrary")]
    public partial class ascBasicReturnMessageType : object
    {
        
        private string ConnectionIDField;
        
        private string DataMessageField;
        
        private string ErrorMessageField;
        
        private string HHIDField;
        
        private string UnitIDField;
        
        private bool successfulField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionID
        {
            get
            {
                return this.ConnectionIDField;
            }
            set
            {
                this.ConnectionIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataMessage
        {
            get
            {
                return this.DataMessageField;
            }
            set
            {
                this.DataMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HHID
        {
            get
            {
                return this.HHIDField;
            }
            set
            {
                this.HHIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitID
        {
            get
            {
                return this.UnitIDField;
            }
            set
            {
                this.UnitIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool successful
        {
            get
            {
                return this.successfulField;
            }
            set
            {
                this.successfulField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvHistoryType", Namespace="http://schemas.datacontract.org/2004/07/asctracWCFLibrary")]
    public partial class InvHistoryType : object
    {
        
        private string LocationIDField;
        
        private string NotesField;
        
        private double QtyTotalField;
        
        private string ReturnMessageField;
        
        private System.DateTime TranDateTimeField;
        
        private bool successfulField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationID
        {
            get
            {
                return this.LocationIDField;
            }
            set
            {
                this.LocationIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes
        {
            get
            {
                return this.NotesField;
            }
            set
            {
                this.NotesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QtyTotal
        {
            get
            {
                return this.QtyTotalField;
            }
            set
            {
                this.QtyTotalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnMessage
        {
            get
            {
                return this.ReturnMessageField;
            }
            set
            {
                this.ReturnMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TranDateTime
        {
            get
            {
                return this.TranDateTimeField;
            }
            set
            {
                this.TranDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool successful
        {
            get
            {
                return this.successfulField;
            }
            set
            {
                this.successfulField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvCountType", Namespace="http://schemas.datacontract.org/2004/07/asctracWCFLibrary")]
    public partial class InvCountType : object
    {
        
        private string AdjReasonField;
        
        private string CommentsField;
        
        private string CostCenterField;
        
        private string NewLocationIDField;
        
        private double NewQtyDualUnitField;
        
        private double NewQtyTotalField;
        
        private string ProjectNumberField;
        
        private string ResponsibleSiteIDField;
        
        private string ReturnMessageField;
        
        private bool fAskCostCenterField;
        
        private bool fAskProjectNumberField;
        
        private bool fAskQtyDualUnitField;
        
        private bool fAskResponsibleSiteIDField;
        
        private string fPasswordField;
        
        private ascTracWCFService.InvType invRecordField;
        
        private string lblPrinterIDField;
        
        private long qtyLblsField;
        
        private bool successfulField;
        
        private string suggLocationIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdjReason
        {
            get
            {
                return this.AdjReasonField;
            }
            set
            {
                this.AdjReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments
        {
            get
            {
                return this.CommentsField;
            }
            set
            {
                this.CommentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CostCenter
        {
            get
            {
                return this.CostCenterField;
            }
            set
            {
                this.CostCenterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewLocationID
        {
            get
            {
                return this.NewLocationIDField;
            }
            set
            {
                this.NewLocationIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewQtyDualUnit
        {
            get
            {
                return this.NewQtyDualUnitField;
            }
            set
            {
                this.NewQtyDualUnitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewQtyTotal
        {
            get
            {
                return this.NewQtyTotalField;
            }
            set
            {
                this.NewQtyTotalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectNumber
        {
            get
            {
                return this.ProjectNumberField;
            }
            set
            {
                this.ProjectNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponsibleSiteID
        {
            get
            {
                return this.ResponsibleSiteIDField;
            }
            set
            {
                this.ResponsibleSiteIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnMessage
        {
            get
            {
                return this.ReturnMessageField;
            }
            set
            {
                this.ReturnMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool fAskCostCenter
        {
            get
            {
                return this.fAskCostCenterField;
            }
            set
            {
                this.fAskCostCenterField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool fAskProjectNumber
        {
            get
            {
                return this.fAskProjectNumberField;
            }
            set
            {
                this.fAskProjectNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool fAskQtyDualUnit
        {
            get
            {
                return this.fAskQtyDualUnitField;
            }
            set
            {
                this.fAskQtyDualUnitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool fAskResponsibleSiteID
        {
            get
            {
                return this.fAskResponsibleSiteIDField;
            }
            set
            {
                this.fAskResponsibleSiteIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fPassword
        {
            get
            {
                return this.fPasswordField;
            }
            set
            {
                this.fPasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ascTracWCFService.InvType invRecord
        {
            get
            {
                return this.invRecordField;
            }
            set
            {
                this.invRecordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lblPrinterID
        {
            get
            {
                return this.lblPrinterIDField;
            }
            set
            {
                this.lblPrinterIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long qtyLbls
        {
            get
            {
                return this.qtyLblsField;
            }
            set
            {
                this.qtyLblsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool successful
        {
            get
            {
                return this.successfulField;
            }
            set
            {
                this.successfulField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string suggLocationID
        {
            get
            {
                return this.suggLocationIDField;
            }
            set
            {
                this.suggLocationIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvType", Namespace="http://schemas.datacontract.org/2004/07/asctracWCFLibrary")]
    public partial class InvType : object
    {
        
        private System.DateTime DateTimeProdField;
        
        private System.DateTime ExpireDateField;
        
        private string InvContainerIDField;
        
        private string ItemDescriptionField;
        
        private string ItemIDField;
        
        private string LocationIDField;
        
        private double PhysAdjField;
        
        private System.DateTime PhysCountDatetimeField;
        
        private string PhysCountStatusField;
        
        private string PhysCountUserIDField;
        
        private string PhysLocField;
        
        private bool QAHoldField;
        
        private string QAReasonField;
        
        private double QtyDualUnitField;
        
        private double QtyTotalField;
        
        private string ReturnMessageField;
        
        private string SkidIDField;
        
        private string StockUOMField;
        
        private bool successfulField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeProd
        {
            get
            {
                return this.DateTimeProdField;
            }
            set
            {
                this.DateTimeProdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpireDate
        {
            get
            {
                return this.ExpireDateField;
            }
            set
            {
                this.ExpireDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvContainerID
        {
            get
            {
                return this.InvContainerIDField;
            }
            set
            {
                this.InvContainerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemDescription
        {
            get
            {
                return this.ItemDescriptionField;
            }
            set
            {
                this.ItemDescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemID
        {
            get
            {
                return this.ItemIDField;
            }
            set
            {
                this.ItemIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationID
        {
            get
            {
                return this.LocationIDField;
            }
            set
            {
                this.LocationIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PhysAdj
        {
            get
            {
                return this.PhysAdjField;
            }
            set
            {
                this.PhysAdjField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PhysCountDatetime
        {
            get
            {
                return this.PhysCountDatetimeField;
            }
            set
            {
                this.PhysCountDatetimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhysCountStatus
        {
            get
            {
                return this.PhysCountStatusField;
            }
            set
            {
                this.PhysCountStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhysCountUserID
        {
            get
            {
                return this.PhysCountUserIDField;
            }
            set
            {
                this.PhysCountUserIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhysLoc
        {
            get
            {
                return this.PhysLocField;
            }
            set
            {
                this.PhysLocField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool QAHold
        {
            get
            {
                return this.QAHoldField;
            }
            set
            {
                this.QAHoldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QAReason
        {
            get
            {
                return this.QAReasonField;
            }
            set
            {
                this.QAReasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QtyDualUnit
        {
            get
            {
                return this.QtyDualUnitField;
            }
            set
            {
                this.QtyDualUnitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double QtyTotal
        {
            get
            {
                return this.QtyTotalField;
            }
            set
            {
                this.QtyTotalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnMessage
        {
            get
            {
                return this.ReturnMessageField;
            }
            set
            {
                this.ReturnMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkidID
        {
            get
            {
                return this.SkidIDField;
            }
            set
            {
                this.SkidIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StockUOM
        {
            get
            {
                return this.StockUOMField;
            }
            set
            {
                this.StockUOMField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool successful
        {
            get
            {
                return this.successfulField;
            }
            set
            {
                this.successfulField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhysCountLocType", Namespace="http://schemas.datacontract.org/2004/07/asctracWCFLibrary")]
    public partial class PhysCountLocType : object
    {
        
        private System.DateTime CountedDateTimeField;
        
        private string LocationIDField;
        
        private string ReturnMessageField;
        
        private System.DateTime ReviewDateTimeField;
        
        private string ReviewFlagField;
        
        private string ReviewUserIDField;
        
        private string StatusField;
        
        private long numMovesField;
        
        private long numRecountsField;
        
        private long numSkidsField;
        
        private long numVarsField;
        
        private bool successfulField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CountedDateTime
        {
            get
            {
                return this.CountedDateTimeField;
            }
            set
            {
                this.CountedDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationID
        {
            get
            {
                return this.LocationIDField;
            }
            set
            {
                this.LocationIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnMessage
        {
            get
            {
                return this.ReturnMessageField;
            }
            set
            {
                this.ReturnMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReviewDateTime
        {
            get
            {
                return this.ReviewDateTimeField;
            }
            set
            {
                this.ReviewDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReviewFlag
        {
            get
            {
                return this.ReviewFlagField;
            }
            set
            {
                this.ReviewFlagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReviewUserID
        {
            get
            {
                return this.ReviewUserIDField;
            }
            set
            {
                this.ReviewUserIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long numMoves
        {
            get
            {
                return this.numMovesField;
            }
            set
            {
                this.numMovesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long numRecounts
        {
            get
            {
                return this.numRecountsField;
            }
            set
            {
                this.numRecountsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long numSkids
        {
            get
            {
                return this.numSkidsField;
            }
            set
            {
                this.numSkidsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long numVars
        {
            get
            {
                return this.numVarsField;
            }
            set
            {
                this.numVarsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool successful
        {
            get
            {
                return this.successfulField;
            }
            set
            {
                this.successfulField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.IService1")]
    public interface IService1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        ascTracWCFService.CompositeType GetDataUsingDataContract(ascTracWCFService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.CompositeType> GetDataUsingDataContractAsync(ascTracWCFService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignonJson", ReplyAction="http://tempuri.org/IService1/SignonJsonResponse")]
        ascTracWCFService.ascBasicReturnMessageType SignonJson(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignonJson", ReplyAction="http://tempuri.org/IService1/SignonJsonResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> SignonJsonAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignoffJson", ReplyAction="http://tempuri.org/IService1/SignoffJsonResponse")]
        ascTracWCFService.ascBasicReturnMessageType SignoffJson(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignoffJson", ReplyAction="http://tempuri.org/IService1/SignoffJsonResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> SignoffJsonAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalcPCE", ReplyAction="http://tempuri.org/IService1/CalcPCEResponse")]
        string CalcPCE(string aOrderType, string aOrderNum, long aLineNum, string aUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalcPCE", ReplyAction="http://tempuri.org/IService1/CalcPCEResponse")]
        System.Threading.Tasks.Task<string> CalcPCEAsync(string aOrderType, string aOrderNum, long aLineNum, string aUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMaintInfo", ReplyAction="http://tempuri.org/IService1/GetMaintInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetMaintInfo(string aRecType, string aID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMaintInfo", ReplyAction="http://tempuri.org/IService1/GetMaintInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetMaintInfoAsync(string aRecType, string aID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doGetMaintInfo", ReplyAction="http://tempuri.org/IService1/doGetMaintInfoResponse")]
        string doGetMaintInfo(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doGetMaintInfo", ReplyAction="http://tempuri.org/IService1/doGetMaintInfoResponse")]
        System.Threading.Tasks.Task<string> doGetMaintInfoAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doImageCapture", ReplyAction="http://tempuri.org/IService1/doImageCaptureResponse")]
        string doImageCapture(string aRecType, string aID, string aDocType, byte[] aImage, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doImageCapture", ReplyAction="http://tempuri.org/IService1/doImageCaptureResponse")]
        System.Threading.Tasks.Task<string> doImageCaptureAsync(string aRecType, string aID, string aDocType, byte[] aImage, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IService1Channel : ascTracWCFService.IService1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ascTracWCFService.IService1>, ascTracWCFService.IService1
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetData(int value)
        {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value)
        {
            return base.Channel.GetDataAsync(value);
        }
        
        public ascTracWCFService.CompositeType GetDataUsingDataContract(ascTracWCFService.CompositeType composite)
        {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.CompositeType> GetDataUsingDataContractAsync(ascTracWCFService.CompositeType composite)
        {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType SignonJson(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.SignonJson(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> SignonJsonAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.SignonJsonAsync(aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType SignoffJson(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.SignoffJson(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> SignoffJsonAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.SignoffJsonAsync(aInboundMsg);
        }
        
        public string CalcPCE(string aOrderType, string aOrderNum, long aLineNum, string aUserID)
        {
            return base.Channel.CalcPCE(aOrderType, aOrderNum, aLineNum, aUserID);
        }
        
        public System.Threading.Tasks.Task<string> CalcPCEAsync(string aOrderType, string aOrderNum, long aLineNum, string aUserID)
        {
            return base.Channel.CalcPCEAsync(aOrderType, aOrderNum, aLineNum, aUserID);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetMaintInfo(string aRecType, string aID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetMaintInfo(aRecType, aID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetMaintInfoAsync(string aRecType, string aID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetMaintInfoAsync(aRecType, aID, aInboundMsg);
        }
        
        public string doGetMaintInfo(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doGetMaintInfo(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> doGetMaintInfoAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doGetMaintInfoAsync(aInboundMsg);
        }
        
        public string doImageCapture(string aRecType, string aID, string aDocType, byte[] aImage, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doImageCapture(aRecType, aID, aDocType, aImage, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> doImageCaptureAsync(string aRecType, string aID, string aDocType, byte[] aImage, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doImageCaptureAsync(aRecType, aID, aDocType, aImage, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService1,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iInvLookup")]
    public interface iInvLookup
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetInvList", ReplyAction="http://tempuri.org/iInvLookup/GetInvListResponse")]
        string GetInvList(string aItemID, bool aIncludeQC, bool aIncludeExp, bool aIncludePicked, int aFieldType, string aFieldValue, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetInvList", ReplyAction="http://tempuri.org/iInvLookup/GetInvListResponse")]
        System.Threading.Tasks.Task<string> GetInvListAsync(string aItemID, bool aIncludeQC, bool aIncludeExp, bool aIncludePicked, int aFieldType, string aFieldValue, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetSkidHistoryList", ReplyAction="http://tempuri.org/iInvLookup/GetSkidHistoryListResponse")]
        ascTracWCFService.InvHistoryType[] GetSkidHistoryList(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetSkidHistoryList", ReplyAction="http://tempuri.org/iInvLookup/GetSkidHistoryListResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.InvHistoryType[]> GetSkidHistoryListAsync(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetSkidInfo", ReplyAction="http://tempuri.org/iInvLookup/GetSkidInfoResponse")]
        ascTracWCFService.InvCountType GetSkidInfo(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetSkidInfo", ReplyAction="http://tempuri.org/iInvLookup/GetSkidInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.InvCountType> GetSkidInfoAsync(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/UpdateSkid", ReplyAction="http://tempuri.org/iInvLookup/UpdateSkidResponse")]
        string UpdateSkid(ascTracWCFService.InvCountType aInvRec, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/UpdateSkid", ReplyAction="http://tempuri.org/iInvLookup/UpdateSkidResponse")]
        System.Threading.Tasks.Task<string> UpdateSkidAsync(ascTracWCFService.InvCountType aInvRec, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetCounts", ReplyAction="http://tempuri.org/iInvLookup/GetCountsResponse")]
        System.Collections.Generic.Dictionary<string, string> GetCounts(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetCounts", ReplyAction="http://tempuri.org/iInvLookup/GetCountsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCountsAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetPhysLocs", ReplyAction="http://tempuri.org/iInvLookup/GetPhysLocsResponse")]
        ascTracWCFService.PhysCountLocType[] GetPhysLocs(string aCountNum, string aStartLocID, string aEndLocID, string aStartItemID, string aEndItemID, bool aIncludeLocCounted, bool aIncludeLocUncounted, bool aIncludeReviewed, bool aIncludeInvAll, bool aIncludeQtyVar, bool aIncludeLocChg, bool aIncludeLocEmpty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetPhysLocs", ReplyAction="http://tempuri.org/iInvLookup/GetPhysLocsResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.PhysCountLocType[]> GetPhysLocsAsync(string aCountNum, string aStartLocID, string aEndLocID, string aStartItemID, string aEndItemID, bool aIncludeLocCounted, bool aIncludeLocUncounted, bool aIncludeReviewed, bool aIncludeInvAll, bool aIncludeQtyVar, bool aIncludeLocChg, bool aIncludeLocEmpty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetPhysLocItems", ReplyAction="http://tempuri.org/iInvLookup/GetPhysLocItemsResponse")]
        ascTracWCFService.InvType[] GetPhysLocItems(string aCountNum, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/GetPhysLocItems", ReplyAction="http://tempuri.org/iInvLookup/GetPhysLocItemsResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.InvType[]> GetPhysLocItemsAsync(string aCountNum, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/RecountPhys", ReplyAction="http://tempuri.org/iInvLookup/RecountPhysResponse")]
        string RecountPhys(string aLocID, string aItemID, string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/RecountPhys", ReplyAction="http://tempuri.org/iInvLookup/RecountPhysResponse")]
        System.Threading.Tasks.Task<string> RecountPhysAsync(string aLocID, string aItemID, string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/PhysCount", ReplyAction="http://tempuri.org/iInvLookup/PhysCountResponse")]
        string PhysCount(string aCountNum, string aLocID, string aItemID, string aSkidID, bool aReviewOnly, double aNewQty, double aNewQtyDualUnit, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iInvLookup/PhysCount", ReplyAction="http://tempuri.org/iInvLookup/PhysCountResponse")]
        System.Threading.Tasks.Task<string> PhysCountAsync(string aCountNum, string aLocID, string aItemID, string aSkidID, bool aReviewOnly, double aNewQty, double aNewQtyDualUnit, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iInvLookupChannel : ascTracWCFService.iInvLookup, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iInvLookupClient : System.ServiceModel.ClientBase<ascTracWCFService.iInvLookup>, ascTracWCFService.iInvLookup
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iInvLookupClient() : 
                base(iInvLookupClient.GetDefaultBinding(), iInvLookupClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iInvLookup.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iInvLookupClient(EndpointConfiguration endpointConfiguration) : 
                base(iInvLookupClient.GetBindingForEndpoint(endpointConfiguration), iInvLookupClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iInvLookupClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iInvLookupClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iInvLookupClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iInvLookupClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iInvLookupClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetInvList(string aItemID, bool aIncludeQC, bool aIncludeExp, bool aIncludePicked, int aFieldType, string aFieldValue, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetInvList(aItemID, aIncludeQC, aIncludeExp, aIncludePicked, aFieldType, aFieldValue, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> GetInvListAsync(string aItemID, bool aIncludeQC, bool aIncludeExp, bool aIncludePicked, int aFieldType, string aFieldValue, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetInvListAsync(aItemID, aIncludeQC, aIncludeExp, aIncludePicked, aFieldType, aFieldValue, aInboundMsg);
        }
        
        public ascTracWCFService.InvHistoryType[] GetSkidHistoryList(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetSkidHistoryList(aSkidID, aItemID, aLocationID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.InvHistoryType[]> GetSkidHistoryListAsync(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetSkidHistoryListAsync(aSkidID, aItemID, aLocationID, aInboundMsg);
        }
        
        public ascTracWCFService.InvCountType GetSkidInfo(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetSkidInfo(aSkidID, aItemID, aLocationID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.InvCountType> GetSkidInfoAsync(string aSkidID, string aItemID, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetSkidInfoAsync(aSkidID, aItemID, aLocationID, aInboundMsg);
        }
        
        public string UpdateSkid(ascTracWCFService.InvCountType aInvRec, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateSkid(aInvRec, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> UpdateSkidAsync(ascTracWCFService.InvCountType aInvRec, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateSkidAsync(aInvRec, aInboundMsg);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetCounts(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCounts(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCountsAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCountsAsync(aInboundMsg);
        }
        
        public ascTracWCFService.PhysCountLocType[] GetPhysLocs(string aCountNum, string aStartLocID, string aEndLocID, string aStartItemID, string aEndItemID, bool aIncludeLocCounted, bool aIncludeLocUncounted, bool aIncludeReviewed, bool aIncludeInvAll, bool aIncludeQtyVar, bool aIncludeLocChg, bool aIncludeLocEmpty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPhysLocs(aCountNum, aStartLocID, aEndLocID, aStartItemID, aEndItemID, aIncludeLocCounted, aIncludeLocUncounted, aIncludeReviewed, aIncludeInvAll, aIncludeQtyVar, aIncludeLocChg, aIncludeLocEmpty, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.PhysCountLocType[]> GetPhysLocsAsync(string aCountNum, string aStartLocID, string aEndLocID, string aStartItemID, string aEndItemID, bool aIncludeLocCounted, bool aIncludeLocUncounted, bool aIncludeReviewed, bool aIncludeInvAll, bool aIncludeQtyVar, bool aIncludeLocChg, bool aIncludeLocEmpty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPhysLocsAsync(aCountNum, aStartLocID, aEndLocID, aStartItemID, aEndItemID, aIncludeLocCounted, aIncludeLocUncounted, aIncludeReviewed, aIncludeInvAll, aIncludeQtyVar, aIncludeLocChg, aIncludeLocEmpty, aInboundMsg);
        }
        
        public ascTracWCFService.InvType[] GetPhysLocItems(string aCountNum, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPhysLocItems(aCountNum, aLocationID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.InvType[]> GetPhysLocItemsAsync(string aCountNum, string aLocationID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPhysLocItemsAsync(aCountNum, aLocationID, aInboundMsg);
        }
        
        public string RecountPhys(string aLocID, string aItemID, string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.RecountPhys(aLocID, aItemID, aSkidID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> RecountPhysAsync(string aLocID, string aItemID, string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.RecountPhysAsync(aLocID, aItemID, aSkidID, aInboundMsg);
        }
        
        public string PhysCount(string aCountNum, string aLocID, string aItemID, string aSkidID, bool aReviewOnly, double aNewQty, double aNewQtyDualUnit, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.PhysCount(aCountNum, aLocID, aItemID, aSkidID, aReviewOnly, aNewQty, aNewQtyDualUnit, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> PhysCountAsync(string aCountNum, string aLocID, string aItemID, string aSkidID, bool aReviewOnly, double aNewQty, double aNewQtyDualUnit, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.PhysCountAsync(aCountNum, aLocID, aItemID, aSkidID, aReviewOnly, aNewQty, aNewQtyDualUnit, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iInvLookup))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iInvLookup))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iInvLookupClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iInvLookup);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iInvLookupClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iInvLookup);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iInvLookup,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iQC")]
    public interface iQC
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/ToggleQCSkid", ReplyAction="http://tempuri.org/iQC/ToggleQCSkidResponse")]
        ascTracWCFService.ascBasicReturnMessageType ToggleQCSkid(string aQCPassword, string aOverride, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/ToggleQCSkid", ReplyAction="http://tempuri.org/iQC/ToggleQCSkidResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> ToggleQCSkidAsync(string aQCPassword, string aOverride, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/SkidQCTest", ReplyAction="http://tempuri.org/iQC/SkidQCTestResponse")]
        string SkidQCTest(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/SkidQCTest", ReplyAction="http://tempuri.org/iQC/SkidQCTestResponse")]
        System.Threading.Tasks.Task<string> SkidQCTestAsync(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/GetSkidQCInfo", ReplyAction="http://tempuri.org/iQC/GetSkidQCInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetSkidQCInfo(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/GetSkidQCInfo", ReplyAction="http://tempuri.org/iQC/GetSkidQCInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetSkidQCInfoAsync(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/GetWOQCTests", ReplyAction="http://tempuri.org/iQC/GetWOQCTestsResponse")]
        string GetWOQCTests(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iQC/GetWOQCTests", ReplyAction="http://tempuri.org/iQC/GetWOQCTestsResponse")]
        System.Threading.Tasks.Task<string> GetWOQCTestsAsync(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iQCChannel : ascTracWCFService.iQC, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iQCClient : System.ServiceModel.ClientBase<ascTracWCFService.iQC>, ascTracWCFService.iQC
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iQCClient() : 
                base(iQCClient.GetDefaultBinding(), iQCClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iQC.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iQCClient(EndpointConfiguration endpointConfiguration) : 
                base(iQCClient.GetBindingForEndpoint(endpointConfiguration), iQCClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iQCClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iQCClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iQCClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iQCClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iQCClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType ToggleQCSkid(string aQCPassword, string aOverride, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ToggleQCSkid(aQCPassword, aOverride, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> ToggleQCSkidAsync(string aQCPassword, string aOverride, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ToggleQCSkidAsync(aQCPassword, aOverride, aInboundMsg);
        }
        
        public string SkidQCTest(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.SkidQCTest(aSkidID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> SkidQCTestAsync(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.SkidQCTestAsync(aSkidID, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetSkidQCInfo(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetSkidQCInfo(aSkidID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetSkidQCInfoAsync(string aSkidID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetSkidQCInfoAsync(aSkidID, aInboundMsg);
        }
        
        public string GetWOQCTests(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOQCTests(aWO, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> GetWOQCTestsAsync(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOQCTestsAsync(aWO, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iQC))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iQC))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iQCClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iQC);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iQCClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iQC);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iQC,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iDockSched")]
    public interface iDockSched
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iDockSched/GetDockSchedList", ReplyAction="http://tempuri.org/iDockSched/GetDockSchedListResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetDockSchedList(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iDockSched/GetDockSchedList", ReplyAction="http://tempuri.org/iDockSched/GetDockSchedListResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetDockSchedListAsync(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iDockSched/GetNewDockSched", ReplyAction="http://tempuri.org/iDockSched/GetNewDockSchedResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetNewDockSched(string aOrderType, string aOrderNum, string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iDockSched/GetNewDockSched", ReplyAction="http://tempuri.org/iDockSched/GetNewDockSchedResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetNewDockSchedAsync(string aOrderType, string aOrderNum, string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iDockSched/doDockSched", ReplyAction="http://tempuri.org/iDockSched/doDockSchedResponse")]
        string doDockSched(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iDockSched/doDockSched", ReplyAction="http://tempuri.org/iDockSched/doDockSchedResponse")]
        System.Threading.Tasks.Task<string> doDockSchedAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iDockSchedChannel : ascTracWCFService.iDockSched, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iDockSchedClient : System.ServiceModel.ClientBase<ascTracWCFService.iDockSched>, ascTracWCFService.iDockSched
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iDockSchedClient() : 
                base(iDockSchedClient.GetDefaultBinding(), iDockSchedClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iDockSched.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iDockSchedClient(EndpointConfiguration endpointConfiguration) : 
                base(iDockSchedClient.GetBindingForEndpoint(endpointConfiguration), iDockSchedClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iDockSchedClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iDockSchedClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iDockSchedClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iDockSchedClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iDockSchedClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetDockSchedList(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetDockSchedList(aDock, aDate, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetDockSchedListAsync(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetDockSchedListAsync(aDock, aDate, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetNewDockSched(string aOrderType, string aOrderNum, string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetNewDockSched(aOrderType, aOrderNum, aDock, aDate, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetNewDockSchedAsync(string aOrderType, string aOrderNum, string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetNewDockSchedAsync(aOrderType, aOrderNum, aDock, aDate, aInboundMsg);
        }
        
        public string doDockSched(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doDockSched(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> doDockSchedAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doDockSchedAsync(aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iDockSched))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iDockSched))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iDockSchedClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iDockSched);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iDockSchedClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iDockSched);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iDockSched,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iReceipt")]
    public interface iReceipt
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/GetConfirmReceiptInfo", ReplyAction="http://tempuri.org/iReceipt/GetConfirmReceiptInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetConfirmReceiptInfo(string aOrderType, string aPONumber, string aReleaseNum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/GetConfirmReceiptInfo", ReplyAction="http://tempuri.org/iReceipt/GetConfirmReceiptInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetConfirmReceiptInfoAsync(string aOrderType, string aPONumber, string aReleaseNum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/DoConfirmReceipt", ReplyAction="http://tempuri.org/iReceipt/DoConfirmReceiptResponse")]
        string DoConfirmReceipt(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/DoConfirmReceipt", ReplyAction="http://tempuri.org/iReceipt/DoConfirmReceiptResponse")]
        System.Threading.Tasks.Task<string> DoConfirmReceiptAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/GetPOStatusSummary", ReplyAction="http://tempuri.org/iReceipt/GetPOStatusSummaryResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetPOStatusSummary(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/GetPOStatusSummary", ReplyAction="http://tempuri.org/iReceipt/GetPOStatusSummaryResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetPOStatusSummaryAsync(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/GetPOStatusByPO", ReplyAction="http://tempuri.org/iReceipt/GetPOStatusByPOResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetPOStatusByPO(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/GetPOStatusByPO", ReplyAction="http://tempuri.org/iReceipt/GetPOStatusByPOResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetPOStatusByPOAsync(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/doPrintPOReport", ReplyAction="http://tempuri.org/iReceipt/doPrintPOReportResponse")]
        string doPrintPOReport(string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReceipt/doPrintPOReport", ReplyAction="http://tempuri.org/iReceipt/doPrintPOReportResponse")]
        System.Threading.Tasks.Task<string> doPrintPOReportAsync(string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iReceiptChannel : ascTracWCFService.iReceipt, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iReceiptClient : System.ServiceModel.ClientBase<ascTracWCFService.iReceipt>, ascTracWCFService.iReceipt
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iReceiptClient() : 
                base(iReceiptClient.GetDefaultBinding(), iReceiptClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iReceipt.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReceiptClient(EndpointConfiguration endpointConfiguration) : 
                base(iReceiptClient.GetBindingForEndpoint(endpointConfiguration), iReceiptClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReceiptClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iReceiptClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReceiptClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iReceiptClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReceiptClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetConfirmReceiptInfo(string aOrderType, string aPONumber, string aReleaseNum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetConfirmReceiptInfo(aOrderType, aPONumber, aReleaseNum, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetConfirmReceiptInfoAsync(string aOrderType, string aPONumber, string aReleaseNum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetConfirmReceiptInfoAsync(aOrderType, aPONumber, aReleaseNum, aInboundMsg);
        }
        
        public string DoConfirmReceipt(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.DoConfirmReceipt(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> DoConfirmReceiptAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.DoConfirmReceiptAsync(aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetPOStatusSummary(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPOStatusSummary(aStatusList, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetPOStatusSummaryAsync(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPOStatusSummaryAsync(aStatusList, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetPOStatusByPO(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPOStatusByPO(aStatusList, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetPOStatusByPOAsync(string aStatusList, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetPOStatusByPOAsync(aStatusList, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public string doPrintPOReport(string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doPrintPOReport(aReportType, aPrinterID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> doPrintPOReportAsync(string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.doPrintPOReportAsync(aReportType, aPrinterID, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iReceipt))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iReceipt))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iReceiptClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iReceipt);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iReceiptClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iReceipt);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iReceipt,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iWOHdr")]
    public interface iWOHdr
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOHdrList", ReplyAction="http://tempuri.org/iWOHdr/GetWOHdrListResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetWOHdrList(string aProdLine, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOHdrList", ReplyAction="http://tempuri.org/iWOHdr/GetWOHdrListResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOHdrListAsync(string aProdLine, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOHdrInfo", ReplyAction="http://tempuri.org/iWOHdr/GetWOHdrInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetWOHdrInfo(string aWorkorder, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOHdrInfo", ReplyAction="http://tempuri.org/iWOHdr/GetWOHdrInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOHdrInfoAsync(string aWorkorder, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/ScheduleWOHdr", ReplyAction="http://tempuri.org/iWOHdr/ScheduleWOHdrResponse")]
        string ScheduleWOHdr(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/ScheduleWOHdr", ReplyAction="http://tempuri.org/iWOHdr/ScheduleWOHdrResponse")]
        System.Threading.Tasks.Task<string> ScheduleWOHdrAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOStatusSummary", ReplyAction="http://tempuri.org/iWOHdr/GetWOStatusSummaryResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetWOStatusSummary(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOStatusSummary", ReplyAction="http://tempuri.org/iWOHdr/GetWOStatusSummaryResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOStatusSummaryAsync(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOStatusByWO", ReplyAction="http://tempuri.org/iWOHdr/GetWOStatusByWOResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetWOStatusByWO(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iWOHdr/GetWOStatusByWO", ReplyAction="http://tempuri.org/iWOHdr/GetWOStatusByWOResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOStatusByWOAsync(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iWOHdrChannel : ascTracWCFService.iWOHdr, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iWOHdrClient : System.ServiceModel.ClientBase<ascTracWCFService.iWOHdr>, ascTracWCFService.iWOHdr
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iWOHdrClient() : 
                base(iWOHdrClient.GetDefaultBinding(), iWOHdrClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iWOHdr.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iWOHdrClient(EndpointConfiguration endpointConfiguration) : 
                base(iWOHdrClient.GetBindingForEndpoint(endpointConfiguration), iWOHdrClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iWOHdrClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iWOHdrClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iWOHdrClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iWOHdrClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iWOHdrClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetWOHdrList(string aProdLine, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOHdrList(aProdLine, aDate, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOHdrListAsync(string aProdLine, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOHdrListAsync(aProdLine, aDate, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetWOHdrInfo(string aWorkorder, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOHdrInfo(aWorkorder, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOHdrInfoAsync(string aWorkorder, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOHdrInfoAsync(aWorkorder, aInboundMsg);
        }
        
        public string ScheduleWOHdr(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ScheduleWOHdr(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> ScheduleWOHdrAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ScheduleWOHdrAsync(aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetWOStatusSummary(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOStatusSummary(aStatusList, aProdLineRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOStatusSummaryAsync(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOStatusSummaryAsync(aStatusList, aProdLineRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetWOStatusByWO(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOStatusByWO(aStatusList, aProdLineRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetWOStatusByWOAsync(string aStatusList, string aProdLineRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOStatusByWOAsync(aStatusList, aProdLineRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iWOHdr))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iWOHdr))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iWOHdrClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iWOHdr);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iWOHdrClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iWOHdr);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iWOHdr,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iProduction")]
    public interface iProduction
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProduction/ProdNewSkid", ReplyAction="http://tempuri.org/iProduction/ProdNewSkidResponse")]
        string ProdNewSkid(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProduction/ProdNewSkid", ReplyAction="http://tempuri.org/iProduction/ProdNewSkidResponse")]
        System.Threading.Tasks.Task<string> ProdNewSkidAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProduction/GetWOLicenses", ReplyAction="http://tempuri.org/iProduction/GetWOLicensesResponse")]
        string GetWOLicenses(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProduction/GetWOLicenses", ReplyAction="http://tempuri.org/iProduction/GetWOLicensesResponse")]
        System.Threading.Tasks.Task<string> GetWOLicensesAsync(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iProductionChannel : ascTracWCFService.iProduction, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iProductionClient : System.ServiceModel.ClientBase<ascTracWCFService.iProduction>, ascTracWCFService.iProduction
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iProductionClient() : 
                base(iProductionClient.GetDefaultBinding(), iProductionClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iProduction.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iProductionClient(EndpointConfiguration endpointConfiguration) : 
                base(iProductionClient.GetBindingForEndpoint(endpointConfiguration), iProductionClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iProductionClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iProductionClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iProductionClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iProductionClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iProductionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string ProdNewSkid(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ProdNewSkid(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> ProdNewSkidAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ProdNewSkidAsync(aInboundMsg);
        }
        
        public string GetWOLicenses(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOLicenses(aWO, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> GetWOLicensesAsync(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOLicensesAsync(aWO, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iProduction))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iProduction))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iProductionClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iProduction);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iProductionClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iProduction);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iProduction,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iConsumption")]
    public interface iConsumption
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iConsumption/GetWOComponents", ReplyAction="http://tempuri.org/iConsumption/GetWOComponentsResponse")]
        string GetWOComponents(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iConsumption/GetWOComponents", ReplyAction="http://tempuri.org/iConsumption/GetWOComponentsResponse")]
        System.Threading.Tasks.Task<string> GetWOComponentsAsync(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iConsumption/GetWOComponentLicenses", ReplyAction="http://tempuri.org/iConsumption/GetWOComponentLicensesResponse")]
        string GetWOComponentLicenses(string aWO, long seqnum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iConsumption/GetWOComponentLicenses", ReplyAction="http://tempuri.org/iConsumption/GetWOComponentLicensesResponse")]
        System.Threading.Tasks.Task<string> GetWOComponentLicensesAsync(string aWO, long seqnum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iConsumption/WOIssueComponent", ReplyAction="http://tempuri.org/iConsumption/WOIssueComponentResponse")]
        string WOIssueComponent(string aWO, long seqnum, string aSkidID, string aFGSkidID, string aItemID, string aLocID, double aQtyIssued, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iConsumption/WOIssueComponent", ReplyAction="http://tempuri.org/iConsumption/WOIssueComponentResponse")]
        System.Threading.Tasks.Task<string> WOIssueComponentAsync(string aWO, long seqnum, string aSkidID, string aFGSkidID, string aItemID, string aLocID, double aQtyIssued, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iConsumptionChannel : ascTracWCFService.iConsumption, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iConsumptionClient : System.ServiceModel.ClientBase<ascTracWCFService.iConsumption>, ascTracWCFService.iConsumption
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iConsumptionClient() : 
                base(iConsumptionClient.GetDefaultBinding(), iConsumptionClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iConsumption.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iConsumptionClient(EndpointConfiguration endpointConfiguration) : 
                base(iConsumptionClient.GetBindingForEndpoint(endpointConfiguration), iConsumptionClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iConsumptionClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iConsumptionClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iConsumptionClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iConsumptionClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iConsumptionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetWOComponents(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOComponents(aWO, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> GetWOComponentsAsync(string aWO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOComponentsAsync(aWO, aInboundMsg);
        }
        
        public string GetWOComponentLicenses(string aWO, long seqnum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOComponentLicenses(aWO, seqnum, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> GetWOComponentLicensesAsync(string aWO, long seqnum, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetWOComponentLicensesAsync(aWO, seqnum, aInboundMsg);
        }
        
        public string WOIssueComponent(string aWO, long seqnum, string aSkidID, string aFGSkidID, string aItemID, string aLocID, double aQtyIssued, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.WOIssueComponent(aWO, seqnum, aSkidID, aFGSkidID, aItemID, aLocID, aQtyIssued, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> WOIssueComponentAsync(string aWO, long seqnum, string aSkidID, string aFGSkidID, string aItemID, string aLocID, double aQtyIssued, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.WOIssueComponentAsync(aWO, seqnum, aSkidID, aFGSkidID, aItemID, aLocID, aQtyIssued, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iConsumption))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iConsumption))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iConsumptionClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iConsumption);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iConsumptionClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iConsumption);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iConsumption,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iCustOrder")]
    public interface iCustOrder
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/GetOrdrDet", ReplyAction="http://tempuri.org/iCustOrder/GetOrdrDetResponse")]
        string GetOrdrDet(string aCO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/GetOrdrDet", ReplyAction="http://tempuri.org/iCustOrder/GetOrdrDetResponse")]
        System.Threading.Tasks.Task<string> GetOrdrDetAsync(string aCO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/UpdateOrdrDet", ReplyAction="http://tempuri.org/iCustOrder/UpdateOrdrDetResponse")]
        string UpdateOrdrDet(string aCO, long aLineNum, string aPCEType, string aNewStatus, bool aClearPickLoc, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/UpdateOrdrDet", ReplyAction="http://tempuri.org/iCustOrder/UpdateOrdrDetResponse")]
        System.Threading.Tasks.Task<string> UpdateOrdrDetAsync(string aCO, long aLineNum, string aPCEType, string aNewStatus, bool aClearPickLoc, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/GetInvAvail", ReplyAction="http://tempuri.org/iCustOrder/GetInvAvailResponse")]
        string GetInvAvail(string aCO, long aLineNum, bool aIncludeQC, bool aIncludeExp, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/GetInvAvail", ReplyAction="http://tempuri.org/iCustOrder/GetInvAvailResponse")]
        System.Threading.Tasks.Task<string> GetInvAvailAsync(string aCO, long aLineNum, bool aIncludeQC, bool aIncludeExp, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/GetOrderContainerLookup", ReplyAction="http://tempuri.org/iCustOrder/GetOrderContainerLookupResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetOrderContainerLookup(string aCO, string aContainerID, string aCntrType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/GetOrderContainerLookup", ReplyAction="http://tempuri.org/iCustOrder/GetOrderContainerLookupResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetOrderContainerLookupAsync(string aCO, string aContainerID, string aCntrType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/PrintOrderContainer", ReplyAction="http://tempuri.org/iCustOrder/PrintOrderContainerResponse")]
        string PrintOrderContainer(string aCO, string aContainerID, string aCntrType, string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrder/PrintOrderContainer", ReplyAction="http://tempuri.org/iCustOrder/PrintOrderContainerResponse")]
        System.Threading.Tasks.Task<string> PrintOrderContainerAsync(string aCO, string aContainerID, string aCntrType, string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iCustOrderChannel : ascTracWCFService.iCustOrder, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iCustOrderClient : System.ServiceModel.ClientBase<ascTracWCFService.iCustOrder>, ascTracWCFService.iCustOrder
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iCustOrderClient() : 
                base(iCustOrderClient.GetDefaultBinding(), iCustOrderClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iCustOrder.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderClient(EndpointConfiguration endpointConfiguration) : 
                base(iCustOrderClient.GetBindingForEndpoint(endpointConfiguration), iCustOrderClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iCustOrderClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iCustOrderClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetOrdrDet(string aCO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetOrdrDet(aCO, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> GetOrdrDetAsync(string aCO, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetOrdrDetAsync(aCO, aInboundMsg);
        }
        
        public string UpdateOrdrDet(string aCO, long aLineNum, string aPCEType, string aNewStatus, bool aClearPickLoc, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateOrdrDet(aCO, aLineNum, aPCEType, aNewStatus, aClearPickLoc, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> UpdateOrdrDetAsync(string aCO, long aLineNum, string aPCEType, string aNewStatus, bool aClearPickLoc, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateOrdrDetAsync(aCO, aLineNum, aPCEType, aNewStatus, aClearPickLoc, aInboundMsg);
        }
        
        public string GetInvAvail(string aCO, long aLineNum, bool aIncludeQC, bool aIncludeExp, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetInvAvail(aCO, aLineNum, aIncludeQC, aIncludeExp, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> GetInvAvailAsync(string aCO, long aLineNum, bool aIncludeQC, bool aIncludeExp, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetInvAvailAsync(aCO, aLineNum, aIncludeQC, aIncludeExp, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetOrderContainerLookup(string aCO, string aContainerID, string aCntrType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetOrderContainerLookup(aCO, aContainerID, aCntrType, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetOrderContainerLookupAsync(string aCO, string aContainerID, string aCntrType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetOrderContainerLookupAsync(aCO, aContainerID, aCntrType, aInboundMsg);
        }
        
        public string PrintOrderContainer(string aCO, string aContainerID, string aCntrType, string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.PrintOrderContainer(aCO, aContainerID, aCntrType, aReportType, aPrinterID, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> PrintOrderContainerAsync(string aCO, string aContainerID, string aCntrType, string aReportType, string aPrinterID, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.PrintOrderContainerAsync(aCO, aContainerID, aCntrType, aReportType, aPrinterID, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCustOrder))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCustOrder))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iCustOrderClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iCustOrder);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iCustOrderClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iCustOrder);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iCustOrder,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iCOSM")]
    public interface iCOSM
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOSM/GetCOStatusSummary", ReplyAction="http://tempuri.org/iCOSM/GetCOStatusSummaryResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetCOStatusSummary(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOSM/GetCOStatusSummary", ReplyAction="http://tempuri.org/iCOSM/GetCOStatusSummaryResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOStatusSummaryAsync(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOSM/GetCOStatusByCO", ReplyAction="http://tempuri.org/iCOSM/GetCOStatusByCOResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetCOStatusByCO(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOSM/GetCOStatusByCO", ReplyAction="http://tempuri.org/iCOSM/GetCOStatusByCOResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOStatusByCOAsync(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOSM/GetCOHdrList", ReplyAction="http://tempuri.org/iCOSM/GetCOHdrListResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetCOHdrList(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOSM/GetCOHdrList", ReplyAction="http://tempuri.org/iCOSM/GetCOHdrListResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOHdrListAsync(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iCOSMChannel : ascTracWCFService.iCOSM, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iCOSMClient : System.ServiceModel.ClientBase<ascTracWCFService.iCOSM>, ascTracWCFService.iCOSM
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iCOSMClient() : 
                base(iCOSMClient.GetDefaultBinding(), iCOSMClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iCOSM.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOSMClient(EndpointConfiguration endpointConfiguration) : 
                base(iCOSMClient.GetBindingForEndpoint(endpointConfiguration), iCOSMClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOSMClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iCOSMClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOSMClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iCOSMClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOSMClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetCOStatusSummary(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOStatusSummary(aStatusList, aDockRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOStatusSummaryAsync(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOStatusSummaryAsync(aStatusList, aDockRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetCOStatusByCO(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOStatusByCO(aStatusList, aDockRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOStatusByCOAsync(string aStatusList, string aDockRange, int aDatefield, int aDateFilter, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOStatusByCOAsync(aStatusList, aDockRange, aDatefield, aDateFilter, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetCOHdrList(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOHdrList(aDock, aDate, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOHdrListAsync(string aDock, System.DateTime aDate, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOHdrListAsync(aDock, aDate, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCOSM))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCOSM))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iCOSMClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iCOSM);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iCOSMClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iCOSM);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iCOSM,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iCustOrderInfo")]
    public interface iCustOrderInfo
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderInfo/GetCOInfo", ReplyAction="http://tempuri.org/iCustOrderInfo/GetCOInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetCOInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderInfo/GetCOInfo", ReplyAction="http://tempuri.org/iCustOrderInfo/GetCOInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderInfo/GetCOList", ReplyAction="http://tempuri.org/iCustOrderInfo/GetCOListResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetCOList(int aCustFilterType, string aCustData, int aFiltertype, string aFilterData, bool aCurrentUserOnly, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderInfo/GetCOList", ReplyAction="http://tempuri.org/iCustOrderInfo/GetCOListResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOListAsync(int aCustFilterType, string aCustData, int aFiltertype, string aFilterData, bool aCurrentUserOnly, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iCustOrderInfoChannel : ascTracWCFService.iCustOrderInfo, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iCustOrderInfoClient : System.ServiceModel.ClientBase<ascTracWCFService.iCustOrderInfo>, ascTracWCFService.iCustOrderInfo
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iCustOrderInfoClient() : 
                base(iCustOrderInfoClient.GetDefaultBinding(), iCustOrderInfoClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iCustOrderInfo.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderInfoClient(EndpointConfiguration endpointConfiguration) : 
                base(iCustOrderInfoClient.GetBindingForEndpoint(endpointConfiguration), iCustOrderInfoClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderInfoClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iCustOrderInfoClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderInfoClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iCustOrderInfoClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderInfoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetCOInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOInfo(aOrderNumber, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOInfoAsync(aOrderNumber, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetCOList(int aCustFilterType, string aCustData, int aFiltertype, string aFilterData, bool aCurrentUserOnly, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOList(aCustFilterType, aCustData, aFiltertype, aFilterData, aCurrentUserOnly, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOListAsync(int aCustFilterType, string aCustData, int aFiltertype, string aFilterData, bool aCurrentUserOnly, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOListAsync(aCustFilterType, aCustData, aFiltertype, aFilterData, aCurrentUserOnly, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCustOrderInfo))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCustOrderInfo))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iCustOrderInfoClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iCustOrderInfo);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iCustOrderInfoClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iCustOrderInfo);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iCustOrderInfo,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iCustOrderFunction")]
    public interface iCustOrderFunction
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/GetScheduleOrderInfo", ReplyAction="http://tempuri.org/iCustOrderFunction/GetScheduleOrderInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetScheduleOrderInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/GetScheduleOrderInfo", ReplyAction="http://tempuri.org/iCustOrderFunction/GetScheduleOrderInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetScheduleOrderInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/ScheduleOrder", ReplyAction="http://tempuri.org/iCustOrderFunction/ScheduleOrderResponse")]
        string ScheduleOrder(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/ScheduleOrder", ReplyAction="http://tempuri.org/iCustOrderFunction/ScheduleOrderResponse")]
        System.Threading.Tasks.Task<string> ScheduleOrderAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/GetCOShipInfo", ReplyAction="http://tempuri.org/iCustOrderFunction/GetCOShipInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetCOShipInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/GetCOShipInfo", ReplyAction="http://tempuri.org/iCustOrderFunction/GetCOShipInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOShipInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/COConfirmShip", ReplyAction="http://tempuri.org/iCustOrderFunction/COConfirmShipResponse")]
        string COConfirmShip(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCustOrderFunction/COConfirmShip", ReplyAction="http://tempuri.org/iCustOrderFunction/COConfirmShipResponse")]
        System.Threading.Tasks.Task<string> COConfirmShipAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iCustOrderFunctionChannel : ascTracWCFService.iCustOrderFunction, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iCustOrderFunctionClient : System.ServiceModel.ClientBase<ascTracWCFService.iCustOrderFunction>, ascTracWCFService.iCustOrderFunction
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iCustOrderFunctionClient() : 
                base(iCustOrderFunctionClient.GetDefaultBinding(), iCustOrderFunctionClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iCustOrderFunction.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderFunctionClient(EndpointConfiguration endpointConfiguration) : 
                base(iCustOrderFunctionClient.GetBindingForEndpoint(endpointConfiguration), iCustOrderFunctionClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderFunctionClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iCustOrderFunctionClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderFunctionClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iCustOrderFunctionClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCustOrderFunctionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetScheduleOrderInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetScheduleOrderInfo(aOrderNumber, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetScheduleOrderInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetScheduleOrderInfoAsync(aOrderNumber, aInboundMsg);
        }
        
        public string ScheduleOrder(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ScheduleOrder(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> ScheduleOrderAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.ScheduleOrderAsync(aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetCOShipInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOShipInfo(aOrderNumber, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOShipInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOShipInfoAsync(aOrderNumber, aInboundMsg);
        }
        
        public string COConfirmShip(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.COConfirmShip(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<string> COConfirmShipAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.COConfirmShipAsync(aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCustOrderFunction))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCustOrderFunction))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iCustOrderFunctionClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iCustOrderFunction);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iCustOrderFunctionClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iCustOrderFunction);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iCustOrderFunction,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iCOEntry")]
    public interface iCOEntry
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/GetUsersCOEntryInfo", ReplyAction="http://tempuri.org/iCOEntry/GetUsersCOEntryInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetUsersCOEntryInfo(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/GetUsersCOEntryInfo", ReplyAction="http://tempuri.org/iCOEntry/GetUsersCOEntryInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetUsersCOEntryInfoAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/GetCOEntryInfo", ReplyAction="http://tempuri.org/iCOEntry/GetCOEntryInfoResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetCOEntryInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/GetCOEntryInfo", ReplyAction="http://tempuri.org/iCOEntry/GetCOEntryInfoResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOEntryInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/UpdateCOHeader", ReplyAction="http://tempuri.org/iCOEntry/UpdateCOHeaderResponse")]
        ascTracWCFService.ascBasicReturnMessageType UpdateCOHeader(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/UpdateCOHeader", ReplyAction="http://tempuri.org/iCOEntry/UpdateCOHeaderResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> UpdateCOHeaderAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/UpdateCODetail", ReplyAction="http://tempuri.org/iCOEntry/UpdateCODetailResponse")]
        ascTracWCFService.ascBasicReturnMessageType UpdateCODetail(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/UpdateCODetail", ReplyAction="http://tempuri.org/iCOEntry/UpdateCODetailResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> UpdateCODetailAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/CompleteCOEntry", ReplyAction="http://tempuri.org/iCOEntry/CompleteCOEntryResponse")]
        ascTracWCFService.ascBasicReturnMessageType CompleteCOEntry(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iCOEntry/CompleteCOEntry", ReplyAction="http://tempuri.org/iCOEntry/CompleteCOEntryResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> CompleteCOEntryAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iCOEntryChannel : ascTracWCFService.iCOEntry, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iCOEntryClient : System.ServiceModel.ClientBase<ascTracWCFService.iCOEntry>, ascTracWCFService.iCOEntry
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iCOEntryClient() : 
                base(iCOEntryClient.GetDefaultBinding(), iCOEntryClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iCOEntry.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOEntryClient(EndpointConfiguration endpointConfiguration) : 
                base(iCOEntryClient.GetBindingForEndpoint(endpointConfiguration), iCOEntryClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOEntryClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iCOEntryClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOEntryClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iCOEntryClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iCOEntryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetUsersCOEntryInfo(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetUsersCOEntryInfo(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetUsersCOEntryInfoAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetUsersCOEntryInfoAsync(aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetCOEntryInfo(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOEntryInfo(aOrderNumber, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetCOEntryInfoAsync(string aOrderNumber, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetCOEntryInfoAsync(aOrderNumber, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType UpdateCOHeader(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateCOHeader(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> UpdateCOHeaderAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateCOHeaderAsync(aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType UpdateCODetail(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateCODetail(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> UpdateCODetailAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.UpdateCODetailAsync(aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType CompleteCOEntry(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.CompleteCOEntry(aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> CompleteCOEntryAsync(ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.CompleteCOEntryAsync(aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCOEntry))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iCOEntry))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iCOEntryClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iCOEntry);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iCOEntryClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iCOEntry);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iCOEntry,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iReplen")]
    public interface iReplen
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReplen/GetReplenSummary", ReplyAction="http://tempuri.org/iReplen/GetReplenSummaryResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetReplenSummary(string aZoneFilter, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReplen/GetReplenSummary", ReplyAction="http://tempuri.org/iReplen/GetReplenSummaryResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetReplenSummaryAsync(string aZoneFilter, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReplen/GetReplenInfoForZone", ReplyAction="http://tempuri.org/iReplen/GetReplenInfoForZoneResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetReplenInfoForZone(string aZoneID, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iReplen/GetReplenInfoForZone", ReplyAction="http://tempuri.org/iReplen/GetReplenInfoForZoneResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetReplenInfoForZoneAsync(string aZoneID, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iReplenChannel : ascTracWCFService.iReplen, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iReplenClient : System.ServiceModel.ClientBase<ascTracWCFService.iReplen>, ascTracWCFService.iReplen
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iReplenClient() : 
                base(iReplenClient.GetDefaultBinding(), iReplenClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iReplen.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReplenClient(EndpointConfiguration endpointConfiguration) : 
                base(iReplenClient.GetBindingForEndpoint(endpointConfiguration), iReplenClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReplenClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iReplenClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReplenClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iReplenClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iReplenClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetReplenSummary(string aZoneFilter, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetReplenSummary(aZoneFilter, aFilterType, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetReplenSummaryAsync(string aZoneFilter, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetReplenSummaryAsync(aZoneFilter, aFilterType, aInboundMsg);
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetReplenInfoForZone(string aZoneID, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetReplenInfoForZone(aZoneID, aFilterType, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetReplenInfoForZoneAsync(string aZoneID, string aFilterType, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetReplenInfoForZoneAsync(aZoneID, aFilterType, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iReplen))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iReplen))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iReplenClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iReplen);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iReplenClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iReplen);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iReplen,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ascTracWCFService.iBOMLookup")]
    public interface iBOMLookup
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iBOMLookup/GetBOMAvailList", ReplyAction="http://tempuri.org/iBOMLookup/GetBOMAvailListResponse")]
        ascTracWCFService.ascBasicReturnMessageType GetBOMAvailList(string aItemID, double aQty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iBOMLookup/GetBOMAvailList", ReplyAction="http://tempuri.org/iBOMLookup/GetBOMAvailListResponse")]
        System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetBOMAvailListAsync(string aItemID, double aQty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface iBOMLookupChannel : ascTracWCFService.iBOMLookup, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class iBOMLookupClient : System.ServiceModel.ClientBase<ascTracWCFService.iBOMLookup>, ascTracWCFService.iBOMLookup
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public iBOMLookupClient() : 
                base(iBOMLookupClient.GetDefaultBinding(), iBOMLookupClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_iBOMLookup.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iBOMLookupClient(EndpointConfiguration endpointConfiguration) : 
                base(iBOMLookupClient.GetBindingForEndpoint(endpointConfiguration), iBOMLookupClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iBOMLookupClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(iBOMLookupClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iBOMLookupClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(iBOMLookupClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public iBOMLookupClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ascTracWCFService.ascBasicReturnMessageType GetBOMAvailList(string aItemID, double aQty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetBOMAvailList(aItemID, aQty, aInboundMsg);
        }
        
        public System.Threading.Tasks.Task<ascTracWCFService.ascBasicReturnMessageType> GetBOMAvailListAsync(string aItemID, double aQty, ascTracWCFService.ascBasicInboundMessageType aInboundMsg)
        {
            return base.Channel.GetBOMAvailListAsync(aItemID, aQty, aInboundMsg);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iBOMLookup))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_iBOMLookup))
            {
                return new System.ServiceModel.EndpointAddress("http://asc-rds02.asc.local/ascTracWCFService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return iBOMLookupClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_iBOMLookup);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return iBOMLookupClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_iBOMLookup);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_iBOMLookup,
        }
    }
}
